---
title: "STAT 331 Portfolio"
author: "William Waldrop"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1
# Lab 2 Question 1
surveys <- read_csv("surveys.csv")
```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2
# Lab 3 Question 2
teacher_evals <- read_csv(here("Week 3", "Lab 3 (Revised)", "teacher_evals.csv"))
```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1
# Lab 3 Question 1 
teacher_evals_compare <- teacher_evals |>
  filter(question_no == 903) |>
  mutate(
    set_level = ifelse(SET_score_avg >= 4, "excellent", "standard"),
    sen_level = case_when(
      seniority <= 4 ~ "junior",
      seniority >= 5 & seniority <= 8 ~ "senior",
      seniority > 8 ~ "very senior"
    )
  ) |>
  select(course_id, set_level, sen_level)
```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2
# Lab 3 Question 5
teacher_evals_clean <- teacher_evals |> 
  rename(sex = gender) |> 
  filter(no_participants >= 10) |> 
  mutate(
    teacher_id = as.character(teacher_id),
    course_id = as.character(course_id),
    sex = as.factor(sex)) |> 
  select(course_id, teacher_id, question_no, no_participants, resp_share,
         SET_score_avg, percent_failed_cur, academic_degree, seniority, sex)
```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1
# Lab 3 Question 5
teacher_evals_clean <- teacher_evals |> 
  rename(sex = gender) |> 
  filter(no_participants >= 10)
```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-1
# Lab 3 Question 11
teacher_evals_clean |>
  filter(seniority == 1)
```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character
# Lab 3 Question 12
teacher_evals_clean |>
  filter(academic_degree == "dr" | academic_degree == "prof")
```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string
# Lab 5 - Identify Witnesses section
witness_two <- person |> 
  filter(address_street_name == "Franklin Ave",
         str_detect(name, "Annabel"))
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date
# Lab 5 Murder in SQL City.  Chaning the integers in the data into a "date" type variable from just a "int" type variable.
gym_checkin <- get_fit_now_check_in |>
  mutate(check_in_date = ymd(check_in_date)) |>
  filter(check_in_date == ymd("2018-01-09"),
         membership_id %in% gym_suspects$id)
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1
# Lab 3 Question 7
demographics_teacher <- teacher_evals_clean |>
  distinct(teacher_id, .keep_all = TRUE) |>
  group_by(academic_degree, sex) |>
  summarise(
    total = n(),
    avg_seniority = mean(seniority),
    .groups = "drop"
  )
```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2
# Lab 3 Question 10
res <- teacher_evals_clean |>
  filter(question_no == 901) |>
  group_by(teacher_id) |>
  summarise(
    n_courses = n_distinct(course_id),
    avg_rating = mean(SET_score_avg, na.rm = TRUE),
    .groups = "drop"
  )
```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1
# Lab 4 Question 4
ca_childcare <- ca_childcare |>
  mutate(
    county_name = str_remove(county_name, " County"),
    region = fct_collapse(
      county_name,
      "Superior California" = superior_counties,
      "North Coast" = north_coast_counties,
      "San Francisco Bay Area" = san_fran_counties,
      "Northern San Joaquin Valley" = n_san_joaquin_counties,
      "Central Coast" = central_coast_counties,
      "Southern San Joaquin Valley" = s_san_joaquin_counties,
      "Inland Empire" = inland_counties,
      "Los Angeles" = la_county,
      "Orange County" = orange_county,
      "San Diego/Imperial" = san_diego_imperial_counties)
  )
```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2

```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string
# Lab 5 - Concert Attendance section
concert_attendance <- facebook_event_checkin |> 
  filter(event_name == "SQL Symphony Concert",
         str_detect(as.character(date), "^201712"))
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1
# Lab 4 Question 3
ca_childcare <- ca_childcare|>
  left_join(tax_rev, by = c("county_name" = "entity_name", "study_year" = "year"))
```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right
# Lab 4 Question 3 - Showing an instead of using a inner join and an alternative using right_join()
tax_rev |>
  right_join(ca_childcare, by = c("entity_name" = "county_name", "year" = "study_year"))

```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2

```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1
# Lab 5 - Bringing Bowers in for Questioning section
suspect <- gym_suspects |> 
  inner_join(gym_checkin, by = c("id" = "membership_id")) |> 
  inner_join(person, by = c("person_id" = "id")) |> 
  inner_join(drivers_license, by = c("license_id" = "id"))
```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2
# Lab 5 - True Murderer section
true_suspect <- real_suspect |>
  inner_join(concert_attendance, by = c("id" = "person_id")) |>
  select(name, height, hair_color, car_make, car_model, attendance_count)
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi
# Lab 5 - True Murderer Section (using a semi_join instead of a inner_join to keep the same data structure) still gets the culprit Miranda Priestly.
real_suspect_concert <- real_suspect |>
  semi_join(concert_attendance, by = c("id" = "person_id"))
```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long
# Lab 4 Question 7
ca_childcare|>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool),
    names_to = "childcare_type",
    values_to = "price")
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide
# Lab 4 Question 5
median_income <- ca_childcare |> 
  filter(study_year %in% c(2008,2018)) |> 
  group_by(region, study_year) |> 
  summarise(median_mhi_2018usd = median(mhi_2018, na.rm = TRUE), .groups = "drop") |>
  mutate(col = paste0("Income_", study_year, "_2018USD")) |>
  pivot_wider(names_from = col, values_from = median_mhi_2018usd)
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Example 1: Lab 1 - Complete Quarto document on ToothGrowth

-   Example 2: Lab 2 - Complete Quarto document on Rodent Data

-   Example 3: Lab 3 - Complete Quarto document on Teacher Evaluations

-   Example 4: Lab 4 - Complete Quarto document on California Childcare Costs

-   Example 5: Lab 5 - Complete Quarto document on SQL City Murder Mystery

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1
# Lab 1 - Tooth Growth Boxplots
ggplot(data = ToothGrowth, 
       mapping = aes(x = supp, y = len)) +
  geom_boxplot() +
  labs(x = "Supplement", y = "Length of Teeth (mm)")
```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2
# Lab 3 Question 5
teacher_evals_clean <- teacher_evals |> 
  rename(sex = gender) |> 
  filter(no_participants >= 10) |> 
  mutate(
    teacher_id = as.character(teacher_id),
    course_id = as.character(course_id),
    sex = as.factor(sex)) |> 
  select(course_id, teacher_id, question_no, no_participants, resp_share,
         SET_score_avg, percent_failed_cur, academic_degree, seniority, sex)
```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example

```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num
# Lab 2 - Scatterplot section
ggplot(data = surveys, 
       mapping = aes(x = weight, y = hindfoot_length)) +
  geom_point(alpha = .03, size = 1) +
  facet_wrap(~ species) + 
  labs(x = "Weight (g)", 
      y = NULL,
      title = "Scatterplot of Weight v. Hindfoot Length by Species",
      subtitle = "Hindfoot Length (mm)")
```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat
# Lab 1 - Tooth Growth by Supplement Type
ggplot(data = ToothGrowth, 
       mapping = aes(x = supp, y = len)) +
  geom_boxplot() +
  labs(x = "Supplement", y = "Length of Teeth (mm)")
```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat
# Lab 2 - Challenge 2 (Medium option)
ggplot(data = surveys,
       mapping = aes(x = species, y = weight, fill = sex)) +
  geom_boxplot(outlier.shape = NA) +
  scale_fill_manual(values = c("F" = "#FF69B4", "M" = "#1d91c8")) +
  labs(
    x = "Species",
    y = "Weight (grams)",
    fill = "Sex",
    title = "Distribution of Weight by Species, Colored by Sex"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1
# Lab 4 Question 7
ca_childcare|>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool),
    names_to = "childcare_type",
    values_to = "price")|>
  ggplot(aes(x = study_year, y = price, color = region)) +
  geom_line() +
  geom_smooth(se = FALSE) +
  facet_wrap(~ childcare_type, scales = "free_y") +
  theme_minimal() +
  theme(
    aspect.ratio = 1,
    legend.position = "right",
    axis.text.x = element_text(angle = 45, hjust = 1))
```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2
# Lab 2 - Challenge Plot section
ggplot(data = surveys,
       mapping = aes(x = species, y = weight, fill = sex)) +
  geom_boxplot(outlier.shape = NA) +
  scale_fill_manual(values = c("F" = "#FF69B4", "M" = "#1d91c8")) +
  labs(
    x = "Species",
    y = "Weight (grams)",
    fill = "Sex",
    title = "Distribution of Weight by Species, Colored by Sex"
  )
```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3
# Lab 1 - Tooth Growth with Clear Labels
ToothGrowth |> 
  mutate(dose = as.factor(dose)) |> 
  ggplot(mapping = aes(x = dose, y = len)) +
  geom_boxplot() +
  labs(x = "Dose of Supplement (mg/day)", y = "Length of Teeth (mm)")
```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4
# Lab 2 - Boxplots section
ggplot(data = surveys,
       mapping = aes(x = species, y = weight)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(aes(color = species), alpha = 0.3, size = 0.7, width = 0.2) +
  labs(
    x = "Species (Scientific Name)",
    y = "Weight (grams)",
    title = "Distribution of Weight Across Species"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1
# Lab 2 - Challenge Plot section
ggplot(data = surveys,
       mapping = aes(x = species, y = weight, fill = sex)) +
  geom_boxplot(outlier.shape = NA) +
  scale_fill_manual(values = c("F" = "#FF69B4", "M" = "#1d91c8"))
```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2
# Lab 4 Question 8
ggplot(ca_childcare,
       aes(x = mhi_2018, y = mc_infant))+
  geom_point(aes(color = region), size = 1)+
  geom_smooth(method = "lm", color = "yellow")
```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize
# Lab 3 Question 6
teacher_evals_clean |>
  summarise(
    n_unique_instructors = n_distinct(teacher_id),
    n_unique_courses = n_distinct(course_id)
  )
```

-   Example using `across()`

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1
# Lab 3 Question 7
demographics_teacher <- teacher_evals_clean |>
  distinct(teacher_id, .keep_all = TRUE) |>
  group_by(academic_degree, sex) |>
  summarise(
    total = n(),
    avg_seniority = mean(seniority),
    .groups = "drop"
  )
```

-   Example 2

```{r}
#| label: dvs-5-2
# Lab 3 Question 9
teacher_evals_clean |>
  group_by(teacher_id, course_id) |>
  summarise(
    n_questions = n_distinct(question_no),
    .groups = "drop"
  ) |>
  filter(n_questions == 9)
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1

```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3

```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2
# Lab 4 Question 5
median_income <- ca_childcare |> 
  filter(study_year %in% c(2008,2018)) |> 
  group_by(region, study_year) |> 
  summarise(median_mhi_2018usd = median(mhi_2018, na.rm = TRUE), .groups = "drop") |>
  mutate(col = paste0("Income_", study_year, "_2018USD")) |>
  pivot_wider(names_from = col, values_from = median_mhi_2018usd)
```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

```

-   using `across()`

```{r}
#| label: pe-1-across

```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1
# Lab 3 - Throughout (using native pipe |> instead of magrittr %>%)
teacher_evals_clean <- teacher_evals |> 
  rename(sex = gender) |> 
  filter(no_participants >= 10)
```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2
# Lab 1 - Tooth Growth with dose as factor
ToothGrowth |> 
  mutate(dose = as.factor(dose)) |> 
  ggplot(mapping = aes(x = dose, y = len)) +
  geom_boxplot() +
  labs(x = "Dose of Supplement (mg/day)", y = "Length of Teeth (mm)")
```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1
# Lab 1 - Two-sample t-test
t.test(len ~ supp, data = ToothGrowth, var.equal = FALSE)
```

-   Example 2

```{r}
#| label: dsm-2-2
# Lab 2 - Conducting Statistical Analyses section
surveys_anova <- surveys |> 
  filter(!is.na(weight), !is.na(species)) |> 
  mutate(species = as.factor(species))

species_mod <- aov(weight ~ species, data = surveys_anova)
summary(species_mod)
```

-   Example 3

```{r}
#| label: dsm-2-3
# Lab 4 Question 9
reg_mod1 <- lm(mc_infant ~ mhi_2018, data = ca_childcare)
summary(reg_mod1)
```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
